////C语言操作符详解
//右移操作符
//  1.算术右移--------
//    右边丢弃，左边补原符号位
//  2.逻辑右移
//    右边丢弃，左边补0

//int main()
//{
//    int a = -1;
//    //>>----右移操作符----移动的是二进制位
//    //整数二进制表示有：原码、反码、补码
//    //存储到内存中的是补码
//    //10000000000000000000000000000001--原码
//    //11111111111111111111111111111110--反码
//    //11111111111111111111111111111111--补码
//    //
//    int b = a >> 1;
//    printf("%d\n", b);
//    //1111
//    //8421=15
//    return 0;
//}

////左移操作符：
////   左边丢弃，右边补0
//int main()
//{
//    int a = 5;
//    int b = a << 1;
//    //00000000000000000000000000000101
//    printf("%d\n", b);
//    return 0;
//}
////对于移位操作符，不要移动复数位，这个标准是未定义的



////
//int main()
//{
//    ////&----按位与----按二进制位
//    //int a = 3;
//    //int b = 5;
//    //int c = a & b;
//    ////00000000000000000000000000000011
//    ////00000000000000000000000000000101
//    ////
//    ////00000000000000000000000000000001
//    //printf("%d\n", c);
//
//    //|----按二进制位或
//    int a = 3;
//    int b = 5;
//    int c = a | b;
//    printf("%d\n", c);
//    //00000000000000000000000000000011
//    //00000000000000000000000000000101
//
//    //00000000000000000000000000000111
//
//    //按二进制位异或
//    //对应的二进制位相同为0；相异唯1
//    //00000000000000000000000000000011
//    //00000000000000000000000000000101
//    //00000000000000000000000000000110
//    int a = 3;
//    int b = 5;
//    int c = a ^ b;
//    printf("%d\n", c);
//
//    return 0;
//}



//交换两个整数
//int main()
//{
//    int a = 3;
//    int b = 5;
//    int tmp = 0;
//    //int tmp=0;//临时变量
//    printf("before:a=%d b=%d\n", a, b);
//    //tmp = a;
//    //a = b;
//    //b = tmp;
//
//    ////加减法----可能会溢出
//    //a = a + b;
//    //b = a - b;
//    //a = a - b;
//    //a=
//    //异或的方法
//    a = a ^ b;//110
//    b = a ^ b;//011
//    a = a ^ b;
//    printf("before:a=%d b=%d\n", a, b);
//    return 0;
//}



//二进制中1的个数
//int main()
//{
//    int num = 0;
//    int count = 0;
//    scanf_s("%d", &num);//-1
//
//    int i = 0;
//        for(i=0;i<32;i++)
//    {
//            if (1 == ((num >> i) & 1))
//            {
//                count++;
//            }
//    }
//        printf("%d\n", count);
//    ////32bit
//    //// num&1==1；
//    //// 0000000000000000000000000000011
//    //// 0000000000000000000000000000001
//    //// 0000000000000000000000000000000
//    ////统计num的补码中有几个
//    //while (num)
//    //{
//    //    if (num % 2 == 1)
//    //    {
//    //        count++;
//    //        num = num / 2;
//    //    }
//    //}
//    //printf("%d\n", count);
//    return 0;
//}

////更优的方法
//int main()
//{
//    int num = -1;
//    int i = 0;
//    int count = 0;
//    while (num)
//    {
//        count++;
//        num = num & (num - 1);
//    }
//    printf("二进制中1的个数=%d\n", count);
//    return 0;
//}



////赋值操作符
//int main()
//{
//    int a = 10;
//    if (a)
//    {
//        printf("hehe\n");
//    }
//    if (!a)
//    {
//        printf("hehe\n");
//    }
//    //printf("%d\n", !a);
//    //a = a + 2;
//    //a += 2;//复合赋值符
//
//    //a = a >> 1;
//    //a >>= 1;
//
//    //a = a & 1;
//    //a &= 1;
//    return 0;
//}
//单目操作符
//只有一个操作数


////取地址、解引用操作符
//int main()
//{
//    int a = 10;
//    int*p=&a;//取地址操作符
//    *p=20;//解引用操作符
//    return 0;
//}

////sizeof操作符
//int main()
//{
//    int a = 10;
//    char c = 'r';
//    char* p = &c;
//    int arr[10] = { 0 };//arr是数组名  int [10]----是数组的类型
//    //sizeof 计算的变量所占内存空间的大小，单位是字节
//    printf("%d\n", sizeof(a));//4-----整型是4个字节
//    printf("%d\n", sizeof(int));
//
//    printf("%d\n", sizeof(c));//1
//    printf("%d\n", sizeof(char));
//
//    printf("%d\n", sizeof(char*));//4或8
//    printf("%d\n", sizeof(p));//4或8
//
//    printf("%d\n", sizeof(arr));//40
//    printf("%d\n", sizeof(int[10]));
//      //---可以通过数组类型计算大小、也可以通过变量名计算大小
//
//    return 0;
//}



//int main()
//{
//    short s = 0;//短整型是2个字节
//    int a = 10;
//    printf("%d\n", sizeof(s = a + 5));
//    printf("%d\n", s);
//
//    //int a = 10;
//    //char b = 'w';
//    //int arr[10] = { 0 };
//
//    //printf("%d\n", sizeof a );//a所占内存空间的大小----计算变量大小时可以省略()
//    //printf("%d\n", sizeof(int));
//
//    //printf("%d\n", sizeof(b));
//    //printf("%d\n", sizeof(char)); 
//
//    //printf("%d\n", sizeof(arr));//10*4=40
//    //printf("%d\n", sizeof(int[10]));
//
//        return 0;
//}


//int main()
//{
//    int a = 11;
//    a=a | (1 << 2);
//    printf("%d\n", a);//15
//    a = a & (~(1 << 2));
//    printf("%d\n", a);//11
//    //00000000000000000000000000000000001011
//    //00000000000000000000000000000000000100--或
//    // 1<<2;
//    //00000000000000000000000000000000000001
//    // 
//    //00000000000000000000000000000000001111
//    //11111111111111111111111111111111111011
//    //00000000000000000000000000000000000100
//    //00000000000000000000000000000000001011
//
//
//    //int a = 0;
//    ////~按位取反(二进制位)
//    ////000000000000000000000000000000000000
//    ////111111111111111111111111111111111111--补码
//    ////111111111111111111111111111111111110--反码
//    ////100000000000000000000000000000000001---------按位取反之后-原码
//    ////-1
//    //printf("%d\n",~a);
//
//    return 0;
//}



//int main()
//{
//    int a = 10;
//    //printf("%d\n", ++a);//前置++，先++，后使用
//    printf("%d\n", a++);//前置++，先使用，后++
//    printf("%d\n", a);
//    return 0;
//}


////强制类型转换 ---（类型）
//int main()
//{
//    int a = (int)3.14;//int a =int(3.14)//err
//
//    return 0;
//}



//void test1(int arr[])//传过来用arr指针进行接收
//{
//    printf("%d\n", sizeof(arr));//arr表示指针 ---大小4/8个字节
//}
//void test2(int ch[])
//{
//    printf("%d\n", sizeof(ch)); //ch表示指针-- - 大小4 / 8个字节
//}
//
//int main()
//{
//    int arr[10] = { 0 };
//    char ch[10] = { 0 };
//    printf("%d\n", sizeof(arr));//10*4=40 ----每个整型数组4字节  包含10个
//    printf("%d\n", sizeof(ch));//10*1=10-----每个字符数组1字节 
//    test1(arr);//数组传参数---传的是首元素的地址
//    test2(arr);
//
//    return 0;
//}



////逻辑与、逻辑或练习
//int main()
//{
//    int a = 0;
//    int b = 5;
//    //int c = a && b;
//    int c = a || b;
//    printf("%d\n", c);
//    return 0;
//}


//int main()
//{
//    int i = 0, a = 0, b = 2, c = 3, d = 4;
//    i = a++ && ++b && d++;
//    //i = a++ || ++b || d++;
//    printf("a=%d\n b=%d\n c=%d\n d=%d\n", a, b, c, d);
//    return 0;
//}


//int main()
//{
//    int a = 10;
//    int b = 20;
//    int max = 0;
//
//    if (a > b)
//        max = a;
//    else
//        max = b;
//
//    max = (a > b ? a : b);//三目操作符
//    //int a = 0;
//    //int b = 0;
//    //if (a > 5)
//    //{
//    //    b = 3;
//    //}
//    //else
//    //{
//    //   b = -3;
//    //}
//    //b = (a > 5 ? 3 : -3);
//    return 0;
//}



////下标引用操作符
//int main()
//{
//    int a = [10] = { 0 };
//    a[4] = 10;//操作数：一个数数组名+一个索引值
//    1 + 2;
//    return 0;
//}



////函数调用操作符
//
//int get_max(int x, int y)
//{
//    return x > y ? x : y;
//}
//int main()
//{
//    int a = 10;
//    int b = 20;
//    //调用函数的时候（）就是函数调用操作符
//    int max = get_max(a, b);
//    printf("max=%d\n", max);
//    return 0;
//}



////结构体操作符   .结构体.成员名
////               ->结构体指针->成员名
////学生
////int float
////
////创建了一个结构体类型---struct Stu
//struct Stu
//{
//    char name[20];
//    int age;
//    char id[20];
//};
//int main()
//{
//    int a = 10;
//    //使用struct Stu这个类型创建了一个学生对象s1，并初始化
//    struct Stu s1 = { "张三",20,"2019010315" };//-----结构体变量
//    struct Stu* ps=&s1;
//
//    printf("%s\n", ps->name);//指针指向对象的name
//    printf("%d\n", ps->age);
//    //结构体指针->成员名
//
//    //printf("%s\n", ( * ps).name);
//    //printf("%d\n", (*ps).age);
//    //printf("%s\n", (*ps).id);
//
//
//    //printf("%s\n", s1.name);
//    //printf("%s\n", s1.id);
//    //printf("%d\n", s1.age);
//    //结构体变量.成员名
//    return 0;
//}



//隐式类型转换
//整型提升--C的整型算术运算总是至少以所缺少整型类型的精度来进行的
//为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整形

//
//int main()
//{
//    char a = 3;
//    //00000000000000000000000000000011
//    //00000011-----a
//   
//    char b = 127;
//    //00000000000000000000000001111111
//    //01111111
//    //a和b如何相加-----按照变量数据类型的符号位来提升
//    //00000011
//    //00000000000000000000000000000011----3----a
//    // 
//    //01111111
//    //00000000000000000000000001111111----5----b
//    //a+b
//    //00000000000000000000000010000010
//    //
//    char c = a + b;
//    //10000010----c
//    //11111111111111111111111110000010---补码---提升之后是一个补码--原码+1取反得到补码
//    //11111111111111111111111110000001---反码
//    //10000000000000000000000001111110---原码
//    printf("%d\n", c);
//    return 0;
//
//}


////说明有整形提升存在
//int main()
//{
//    char a = 0xb6;
//    short b = 0xb600;
//    int c = 0xb6000000;
//    if (a == 0xb6)
//        printf("a");
//    if (b == 0xb600)
//        printf("b");
//    if (c == 0xb6000000)
//        printf("c");
//    return 0;
//}


//int main()
//{
//    char c = 1;//----char类型的变量一个字节
//    printf("%u\n", sizeof(c));//1----整型提升--计算整型大小为四个字节
//    printf("%u\n", sizeof(+c));//4
//    printf("%u\n", sizeof(!c));//1
//    return 0;
//}


////算术转换
//long double
//double
//float
//unsigned long int
//long int
//unsigned int
//int 

//////操作符的属性 影响复杂表达式求值的三个因素
////1.操作符的优先级
////2.操作符的结合性
////3.是否控制操作顺序
//int main()
//{
//    int a = 10;
//    int b = 20;
//    //int c = b + a * 3;
//    int c = b + a + 3;
//
//    return 0;
//}
