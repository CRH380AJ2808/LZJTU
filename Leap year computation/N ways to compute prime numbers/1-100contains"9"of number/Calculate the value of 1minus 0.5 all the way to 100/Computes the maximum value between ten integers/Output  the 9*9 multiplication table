//int main()
//{
//    int year = 0;
//    int count = 0;
//    for (year = 1000; year <= 2000; year++)
//    {
//        //判断year 是否为闰年
//        //1.能被四整除并且不能被100整除的是闰年
//        //2.能被400整除的是闰年
//        if (year % 4 == 0 && year % 100 != 0)
//        {
//            printf("%d ", year);
//            count++;
//        }
//        else if (year % 400 == 0)
//        {
//            printf("%d ", year);
//            count++;
//        }
//    }
//    printf("\ncount=%d\n", count);
//    return 0;
//}


//int main()
//{
//    int year = 0;
//    int count = 0;
//    for (year = 1000; year <= 2000; year++)
//    {
//        ////判断year 是否为闰年
//        ////1.能被四整除并且不能被100整除的是闰年
//        ////2.能被400整除的是闰年
//        //if (year % 4 == 0 && year % 100 != 0)
//        //{
//        //    printf("%d ", year);
//        //    count++;
//        //}
//        //else if (year % 400 == 0)
//        //{
//        //    printf("%d ", year);
//        //    count++;
//        //}
//        if((year%4==0)&&(year%100!=0) || (year%400==0));
//        {
//            printf("%d\n ", year);
//            count++;
//        }
//    }
//    printf("\ncount=%d\n", count);
//    return 0;
//}







////打印100-200之间的素数
//int main()
//{
//    int i = 0;
//    int count = 0;
//    for (i = 100; i <= 200; i++)
//    {
//        //判断i是否为素数
//        //素数判断规则
//        //1.试除法
//        //13 只能被1和13整除   选用2-12
//        //产生2-（i-1）之间的数字
//        int j = 0;
//        for (j = 2; j < i; j++)
//        {
//            if (i % j == 0)
//                break;//break 跳出循环后不是素数 
//        }
//        //1,2种情况   当j=i的时候也会跳出循环
//                      //一定找到了素数 需要和上述条件中分离出来
//        if (j == i)//分离两种情况
//        {
//            count++;
//            printf("%d ", i);//打印出一种情况的素数
//        }
//    }
//    printf("\ncount=%d\n", count);
//    return 0;
//}




////i=a*b   a和b中至少有一个数字是<=开平方i
////打印100-200之间的素数
//#include<math.h>
//int main()
//{
//    int i = 0;
//    int count = 0;
//    //sqrt--开平方的数学库函数
//    for (i = 100; i <= 200; i++)
//    {
//        //判断i是否为素数
//        //素数判断规则
//        //1.试除法
//        //13 只能被1和13整除   选用2-12
//        //产生2-（i-1）之间的数字
//        int j = 0;
//        for (j = 2; j <=sqrt(i); j++)
//        {
//            if (i % j == 0)
//                break;//break 跳出循环后不是素数 
//        }
//        //1,2种情况   当j=i的时候也会跳出循环
//                      //一定找到了素数 需要和上述条件中分离出来
//        if (j>sqrt(i))//分离两种情况
//        {
//            count++;
//            printf("%d ", i);//打印出一种情况的素数
//        }
//    }
//    printf("\ncount=%d\n", count);
//    return 0;
//}
////<素数求解的n种境界>








////1-100中含有"9"的个数
////个位是9或者十位是9
////%10余9  或者/10商9
//int main()
//{
//    int i = 0;
//    int count = 0;
//    for(i=0;i<=100;i++)
//    {
//        if (i % 10 == 9)
//            count++;
//        if (i / 10 == 9)//两个if并列关系
//            count++;
//    }
//    //9 19 29 39....99---10
//    //90 91 92 ....99----10
//    printf("count=%d\n",count);
//    return 0;
//}






//计算1/1-1/2-+1/3-1/4+1/5.....+1/99-1/100的值打印结果
int main()
{
    int i = 0;
    double sum = 0.0;
    int flag = 1;
    for (i = 1; i <= 100; i++)
    {
        sum+=flag*1.0 / i;
        flag = -flag;
    }
    //1/1+1/2+1/3...
    //1+0+0+0....=1
    printf("%lf\n", sum);
    return 0;
}






//求10个整数之间的最大值
int main()
{
    int arr[] = { -1,-2,-3,-4,-5,-6,-7,-8,-9,-10 };
    int max = arr[0];//最大值
    int i = 0;
    int sz = sizeof(arr) / sizeof(arr[0]);
    for (i = 1; i < sz; i++)
    {
        if (arr[i] > max)
        {
            max = arr[i];
        }
    }
    printf("max=%d\n", max);
    return 0;
}





////在屏幕上输出9*9的乘法口诀表
//////
////1*1=1
////2*1=2 2*2=4 
////3*1=3 3*2=6 3*3=9
////......
////9*1=9..........
//int main()
//{
//    int i = 0;
//    //确定打印9行
//    for (i = 1; i <= 9; i++)
//    {
//        //打印一行
//        int j = 1;
//        for (j = 1; j <= i; j++)
//        {
//            printf("%d*%d=%-2d ", i, j, i * j);
//        }
//        printf("\n");
//    }
//    return 0;
//}
