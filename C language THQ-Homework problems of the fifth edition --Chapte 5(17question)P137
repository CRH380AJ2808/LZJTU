////课后习题5-2
//#include<math.h>
//
//int main()
//{
//    int sign = 1;
//    double pi = 0.0, n = 1.0, term = 1.0;
//    int count = 0;
//
//    while (fabs(term) >= 1e-8)//(fabs(term) >= 1e-6)
//    {
//        count++;
//        pi = pi + term;
//        n = n + 2;
//        sign = -sign;
//        term = sign / n;
//    }
//    pi = pi * 4;
//    printf("pi=%10.8f\n", pi);
//    printf("count=%d\n", count);
//}


////课后习题5-3
////讨论如何求两个最大公约数、最小公倍数---辗转相除法
////以除数和余数反复做除法运算，当中余数为零的时候，就取当中的算式当中的除数为最大公约数
////eg;77 28
////   77%28=2...21
////    28%21=1...7
////    21%7=3....0
////最小公倍数：
////两个自然数的乘积=最大公约数*最小公倍数
//int main()
//{
//    int m,n;//从标准输入中获取 m n的值
//    scanf_s("%d%d", &m, &n);
//    if (n<m)
//    {
//        int tmp = n;
//        n = m;
//        m = tmp;
//    }
//   int total = n * m;//为最小公倍数保存两者的乘积
//   int r = -1;//r代表余数
//   while (m != 0)
//   {
//       r = n % m;
//       n = m;
//       m = r;
//   }
//   printf("最大公约数为%d\n", n);
//   printf("最小公倍数为%d\n",total/n);
//        return 0;
//}



////5-4统计各字符的个数
////   getchar函数
////   1.可以从标准输入中获取一个字符
////   2.当标准输入出入了多个字符的时候，getchar函数就会从缓冲区
////     读取字符 我们可以向标准输入函数中输入多个字符，使用getchar函数循环读取
////   3.当我们在标准输入一行字符串的时候，字符串的尾部时\n
////      也就告诉我们当中 我们读到\n的时候就读完了
// 
// int main()
//{
//    int eng_char = 0;
//    int space_char = 0;
//    int digit_char = 0;
//    int other_char = 0;
//
//    char c;
//    while ((c = getchar()) != '\n')
//    {
//        if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')
//        {
//            eng_char++;
//        }
//        else if (c == ' ')
//        {
//            space_char++;
//        }
//        else if(c>='0'&&c<='9')
//        {
//            digit_char++;
//        }
//        else
//        {
//            other_char++;
//        }
//    }
//    printf("英文字符：%d\n",eng_char);
//    printf("space字符：%d\n", space_char);
//    printf("数字字符：%d\n", digit_char);
//    printf("其他字符：%d\n", other_char);
//    return 0;
//}




////5-5 求2+22+222+2222+22222
// //n=5 a=2
// //22=2*10^1+2
// //222=2*10^2+22
////sum=a*10^(项数的次方)+前一项数字
//
//#include<math.h>
//int main()
//{
//    int n = 0;
//    double a, signle_num = 0.0, total_sum = 0.0;
//    scanf_s("%d%lf", &n, &a);
//    if(int i=0;i<n;i++)
//        {
//            signle_num += a * pow(10, i);
//            total_sum += signle_num;
//        }
//        printf("lf\n", total_sum);
//        return 0;
//}//err



//5-6  阶乘

////需要注意对于1-20阶乘结果已经超出了int能够接收的范围
//   //故用double类型
////1.遍历获取每一个数字[1-20]
////2.对每一个数进行阶乘
////3.对每个数字的阶乘结果进行求和
//int main()
//{
//    double total_sum = 0.0;
//    for (int i = 1; i <= 20; i++)
//    {
//        //i=8  ---> 8*7*6*....*1
//        double single_num = 1.0;
//        for (int j = i; j > 0; j--)
//        {
//            single_num *= j;
//        }
//        total_sum += single_num;
//    }
//    printf("%lf\n", total_sum);
//    return 0;
//}




//5-7求阶乘的和
//1.求1-100之和，1+2+3+...+100----为整数求和
//2.求1^2+....+50^2-----------和为整数
//3.求1/1+1/2+...+1/10-----结果为浮点数
//---------对于整个求和结果为浮点数

//int main()
//{
//    double total_sum = 0.0, sum1 = 0.0, sum2 = 0.0, sum3 = 0.0;
//    for (int i = 1; i <= 100; i++)
//    {
//        //1+2+....+100
//        sum1 += i;
//
//        //1^2+....+50^2
//        if (i <= 50)
//        {
//            sum2 += i * i;
//        }
//        if (i <= 10)
//        {
//            sum3 += 1.0 / i;
//        }
//     }
//    total_sum = sum1 + sum2 + sum3;
//    printf("%lf\n", total_sum);
//    return 0;
//}



////输出所有水仙花数
////1.  3位数--[100-999]
////2.  采用%10的方法获取每一位数字
//
//int main()
//{
//    int a, b, c;//a--百位数字  b-----十位数字  c-----个位数字
//    for (int i = 100; i <= 999; i++)//获取100-999之间的数字
//    {
//
//        //获取三位数字中的每一位
//        a = i / 100;
//        b = (i / 10) % 10;
//        c = i % 10;
//        if (a*a*a + b*b*b+ c*c*c == i)
//        {
//            printf("%d\n", i);
//        }
//    }
//    return 0;
//}




//////5-9输出完数
////   1.如何获取2-1000之内的所有数字
////    for(int data;data<=1000;date++)
////   2.如何获取data这个数字的所有因子之和
////     2.1什么是因子
////         如果一个数a除以整数b(b!=0),余数为0的情况下
////         称b是a的一个因子
////     <=>2.2如何求data这个数字的所有因子
////         data%[1,data)
////         data%[1,data/2]==>(data/2,data)
////      2.3判断
////         //if(data%[i,data/2==0])
////     <==>问题转化为  如何获取[1-data/2]区间内的一个数
////             for(int i=1;i<data/2,i++)
////                 if(data%i==0)
////                     因子求和
////    3.判断当前数字是否是完数，因子求和的值是否等于该数本身
////                     因子求和==data
////                     如果等于，则data为完数，按照格式输出
//int main()
//{
//    int factor_sum = 0;
//    for (int data = 2; data < 1000; data++)
//    {
//        for (int factor = 1; factor <= data / 2; factor++)
//        {
//            if (data % factor == 0)
//            {
//                factor_sum += factor;
//            }
//        }
//        if (factor_sum == data)//判断是否是完数
//        {
//            printf("%d its factors are", data);
//            for (int factor = 1; factor < data / 2; factor++)
//            {
//                if (data % factor == 0)
//                {
//                    printf("%d, ", factor);
//                }
//            }
//            printf("\n");
//         }
//    }
//        return 0;
//}//err




//////5-10  求数列之和  2/1+3/2+5/3+8/5+13/8+21/13.....
////1.对于下一个分式的分子=等于上一个分式中的分子+分母
////2.对于下一个分式的分母=上一个分式中的分子
////  
////分式结果不是整数---需要使用浮点类型保存数据
//
//int main()
//{
//    double a = 2.0, b = 1.0, total_sum = 0.0;
//    for (int i = 0; i < 20; i++)
//    {
//        total_sum = a / b;
//        //更新分子和分母 
//        double tmp = a;
//        a = a+b;
//        b = tmp;
//    }
//    printf("%lf\n", total_sum);
//    return 0;
//}



////5-11小球自由落下 反弹
//int main()
//{
//    double total_h = 100.0;
//    double total_sum = 0.0;
//    for (int i = 0; i < 10; i++)
//    {
//        //下落+反弹
//        total_sum += total_h;
//        total_h /= 2;
//        total_sum += total_h;
//    }
//    total_sum -= total_h;//第十次回弹的距离从总距离中去除掉
//
//    printf("小球经过%lfm，第十次回弹距离%lfm\n", total_sum, total_h);
//}



////5-12 猴子吃桃问题-------只吃了九天
////下一天的桃子数量=上一天的桃子数量/2-1
////（下一天桃子的数量+1）*2=上一天桃子的数量
//
////第十天  第九天  第八天   第七天  第六天  .....第一天
////  1       4       10       22      46    .....   
//int main()
//{
//    int day = 9;
//    int current_day_count = 1;
//    int previous_day_count;
//    while (day > 0)
//    {
//        previous_day_count = (current_day_count + 1) * 2;
//        current_day_count = previous_day_count;//更新一下当前天
//        day--;
//    }
//    printf("第一天获取的桃子数量为%d", previous_day_count);
//    return 0;
//}



//////5-13用迭代法求x=sqrt(a)----迭代公式Xn+1=1/2(Xn+a/Xn)
////1.fabs函数获取一个数的绝对值（Xn+1-Xn）
////2.科学计数法---1e-5
////3.有可能出现小数--浮点型
//#include<math.h>
//int main()
//{
//    float a, x0, x1;
//    scanf_s("%f", &a);
//
//    x0 = a / 2;
//    x1 = (x0 + a / x0) / 2;
//    while (fabs(x0 - x1) >= 1e-5)
//    {
//        //更新x0 x1的值
//        x0 = x1;
//        x1 = (x0 + a / x0) / 2;
//    }
//    printf("%f的平方根为%f\n", a, x1);
//    return 0;
//}



////5-14  用牛顿迭代法求方程2x^3-4x^2+3x-6=0在1.5附近的根
//
//#include<math.h>
//int main()
//{
//    double x0, x1,f,f1;//x0-->xn  x1-->xn+1   f-->f(xn)  f1-->f'(xn)
//    x1 = 1.5;
//    do
//    {
//        x0 = x1;
//        f = ((2 * x0 - 4) * x0 + 3)*x0 - 6;
//        f1 = (6 * x0 - 8) * x0 + 3;
//        x1 = x0 - f / f1;
//    } while (fabs(x1 - x0) >= 1e-5);
//
//        printf("方程在1.5附近的根为：%lf\n",x1);
//        return 0;
//}



//////5-15 二分法求方程2x^3-4x^2+3x-6=0在（-10，10）的根
//////1.将区间划分为两部分记录区间的左右端点，
////  并且通过区间的左右端点计算出带入方程中进行计算，求得结果；
////    a.结果>0，则结果将中位数赋值给右端点
////    b.结果<0，则结果将中位数赋值给左端点
////    c.以此类推<==>循环计算
////      直到将中位数带到方程中的计算结果是小于10^-5，
////      则认为中点坐标为方程的根
//
//#include<math.h>
//int main()
//{
//    double left = -10, right = 10, mid;
//    double tmp = 10;
//
//    while (fabs(tmp) > 1e-5)
//    {
//        mid = (left + right) / 2;
//        tmp = ((2 * mid - 4) * mid + 3) * mid - 6;
//
//        if (tmp > 0)
//        {
//            right = mid;
//        }
//        else if(tmp<0)
//        {
//            left = mid;
//        }       
//    }
//    printf("方程在(-10,10)之间的根为：%lf", mid);
//        return 0;
//}



////5-16 输出图案
//int main()
//{
//    for (int i = 0; i < 4; i++)
//    {
//        for (int j = 3 - i; j > 0; j--)
//        {
//            printf(" ");
//        }
//        for (int j = 2 * i + 1; j > 0; j--)
//        {
//            printf("*");
//        }
//        printf("\n");
//    }
//    for (int i = 0; i < 3; i++)
//    {
//        for (int j = i+1; j > 0; j--)
//        {
//            printf(" ");
//        }
//        for (int j = 7-2 * (i + 1); j > 0; j--)
//        {
//            printf("*");
//        }
//        printf("\n");
//    }
//    return 0;
//}



////5-17乒乓球比赛
//
//int main()
//{
//    //列举A的所有对战对象
//    for(int A='X';A<='Z';A++)
//    {
//        //列举B的所有对战对象
//        for (int B = 'X'; B <= 'Z'; B++)
//        {
//            //列举C的所有对战对象
//            for (int C = 'X'; C <= 'Z'; C++)
//            {
//                if (A != 'X' && C != 'X' && C != 'Z' && A != B && A != C && B != C)
//                {
//                    printf("A对战%c,B对战%c,C对战%c\n", A, B, C);
//                }
//            }
//        }
//    }
//    
//}
