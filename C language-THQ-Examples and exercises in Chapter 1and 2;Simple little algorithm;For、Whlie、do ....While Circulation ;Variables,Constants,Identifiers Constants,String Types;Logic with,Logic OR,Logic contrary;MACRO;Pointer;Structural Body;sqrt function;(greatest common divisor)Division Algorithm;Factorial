#include<stdio.h>

//p14 4编写输出程序
//int main()
//{
//	printf("Holle World\n");
//	return 0;
//}




//编写输入图形程序
//#include<stdio.h>
//int main()
//{
//	printf("****\n");
//	printf(" ****\n");
//	printf("  ****\n");
//	return 0;
//}


//int main()
//{
//	for (int i = 0; i < 20; i++)
//	{
//		for (int j = 0; j < i; j++)
//		{
//			printf("%s", "   ");
//		}
//		printf("%s\n", "****");
//	}
//	return 0;
//}





//int main()
//{
//	printf("    ****\n");
//	printf("   ******\n");
//	printf("  ********\n");
//	printf(" **********\n");
//	return 0;
//}
//




//计算a+b的值
//int main( )
//{
//	int a, b, sum;
//	a = 123;
//	b = 456;
//	sum = a + b;
//		printf("%d\n",sum);
//		return 0;
//}

//编写a，b,c输出最大值
//int main()
//{
//	int a, b, c, max;//表示a，b，c表示输入的三个数，max储存最大
//	printf("please input a,b,c:\n");  //输入数据
//	scanf_s("%d%d%d",&a,&b,&c);       //scanf_s 储存
//
//	max = a;
//	if (max < b)
//		max = b;
//	if(max < c)
//	max = c;
//
//
//	printf("the largest number is %d\n",max);
//		return (0);
//}



//计算a*b
//int main()
//{
//	int a, b, c;
//	
//	scanf_s("%d,%d",&a,&b);
//	c = a * b;
//	printf("c=%d", c);
//		return 0;
//		 
//}






// a b 两个数比大小
//int main()
//{
//	int a, b;
//	scanf_s("%d,%d",&a,&b);
//	if (a > b)
//		printf("%d", a);
//	else
//		printf("%d", b);
//	return 0;
//
//}
//







//a b c 三个数输出最大值
//int main()
//{
//	int a, b, c, max;
//	a = 123, b = 456, c = 789;
//	max = a;
//	if (max < b)
//		max = b;
//	if (max < c)
//		max = c;
//	printf("the largest number is %d\n", max);
//	return 0;
//}






//a,b,c按大小顺序排列     错了
//#include <stdio.h>
//int main( )
//{
//	int t, a, b, c;
//	scanf_s("%d%d%d", &a, &b, &c);
//	if (a < b)
//	{
//		t = a,a = b,b = t;
//		if (a < b);
//		else(c > a);
//	}
//	if (c >= a)
//	{
//		t = a, c = b, b = a, a = t;
//		if (c >= a);
//		else(c >= b);
//		if (c >= b)
//			t = c, c = b, b = t;
//			if(c >= b);
//		else printf("%d %d %d\n", a, b, c);
//		t = c, c = b, b = t;
//	}
//	if (b < c)
//	{
//		t = b,b = c,c = t;
//	}
//	printf("%d %d %d\n", a, b, c);
//	return 0;
//}
//原理就是运用冒泡算法，把最大的数浮在最上面，而小的数就下沉，最后就输出




//     错了
//
//int main( )
//{
//	int a, b, c, e;
//	scanf_s("%d%d%d", &a, &b, &c);
//		if (a > b);
//		{
//			e = a; a = b; b = e;
//		}
//	if (a > c)
//	{
//		e = a; a = c; c = e;
//	}
//	if (b > c)
//	{
//		e = b; b = c; c = e;
//	}
//	printf("从小到大排列顺序为：%d\n",e,);
//		return 0;
//}




//      错了
//#include<stdio.h>
////
//int main( )
//{
//	int a{}, b{}, c{},d{};
//	printf("请输入三个整数：");
//		scanf_s("%d%d%d", &a, &b, &c);
//		d = (a + b + c)/3;
//		printf("三个整数的平均值：%d\n",d);
//		return 0;
//}
//



//错了
//int main()
//{
//	double a, b, c;
//	scanf_s("%if%if%if", &a, &b, &c);
//	printf("%.3if", (a + b + c) / 3);
//}







//P17 2.3简单的算法举例 
//【例题2.1】
//考虑使用循环算法  设置两个变量 一个表示被乘数 一个表示乘数
   //不设置单独变量存放乘积结果，直接将每一步的乘积放在被乘数变量中。
   //今设p为被乘数 i为乘数   使用循环算法
/*1p *///或令p=1  （表示将1存放在变量p中）

//C语言循环结构（while循环，for循环，do…while循环）




////【P35 习题4】(1)交换ab
////方法一
//int main()
//{
//    int a = 1;
//    int b = 2;
//    int c = a;
//    printf("a=%d\n", a = b);
//    {
//        printf("b=%d\n", b = c);
//    }
//    return 0;
//}

//方法二
//把a+b赋给a，然后用a-b（等于a原来的值）赋给b，
// 再用a-b（等于b原来的值）赋给a
//int main()
//{
//    int a = 1;
//    int b = 2;
//    a = a + b;//a=3
//    b = a - b;//b=1
//    a = a - b;//a=2
//    printf("a=%d,b=%d\n", a, b);
//    return 0;
//}

//(2)依次输入10个数 输出最大的
 //#include <stdio.h>
 //int main()
 //{
 //        int num[10], i, max;
 //        printf("请输入要排序的10个数:");
 //        for (i = 0; i < 10; i++)
 //                scanf("%d", &num[i]);
 //        max = num[0];
 //        for (int j = 0; j < 10; j++)
 //            {
 //                if (num[j] > max)
 //                        max = num[j];
 //            }
 //        printf("The max is %d\n", max);
 //        return 0;
 //   }


////(3)a b c按照大小顺序输出
//#include <stdio.h>
//int main()
//{
//    int t, a, b, c;
//    scanf("%d%d%d", &a, &b, &c);
//    if (a < b)
//    {
//        t = a,a = b,b = t;
//    }
//    if (a < c)
//    {
//        t = a,a = c,c = t;
//    }
//    if (b < c)
//    {
//        t = b,b = c,c = t;
//    }
//    printf("%d %d %d\n", a, b, c);
//    return 0;
//}

////(4)求1+2+3+4+.....+100
//int main()   //错了
//{
//    int j;
//    int i;
//    int sum = 0;//把sum初始定为0
//    for (i = 1; j < 101;j++);//遍历1到100，把所有的和相加保存到sum中
//    {
//        sum += i;
//    }
//    printf("%d", sum);
//    return 0;
//}

////方法一：
////#include<stdio.h>
//int main()
//{
//    int a = 0, b = 1;
//    while (b <= 100)
//    {
//        a = a + b;
//        b++;
//    }
//    printf("%d", a);
//    return 0;
//}

////方法二：
////#include<stdio.h>
//int main()
//{
//    int i, j = 0;
//    for (i = 1; i <= 100; i++)
//    {
//        j += i;
//    }
//    printf("%d", j);
//    return 0;
//}

////方法三：
////#include<stdio.h>
//int main()
//{
//    int a = 0, b = 1;
//    do
//    {
//        a += b;
//        b++;
//    } while (b <= 100);
//    printf("%d", a);
//    return 0;
//}

////方法四：（用数学公式）
////#include<stdio.h>
//int main()
//{
//    printf("%d", (1 + 100) * 50);
//    return 0;
//}

////方法五：（最难最难打的方法也是最简单最简单的了）
////#include<stdio.h>
//int main()
//{
//    printf("%d", 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 99 + 100);
//    return 0;
//}


////(5）判断一个数n 能否同时被3和5整除
//int main()
//{
//    int n;
//    printf("请输入一个整数：");
//        scanf("%d", &n);
//        if (n % 3 == 0 && n % 5 == 0)
//            printf("这个数可以同时被3和5整除\n");
//        else
//            printf("这个数不可以同时被3和5整除\n");
//        return 0;
//}

////(6)求1到200之间的素数
//int main()
//{
//    int i,j;
//    for (i = 100; i <= 200; i++)
//    {
//        if (i % j == 0)break;
//    }
//    if (j > i)
//        printf("%d\t", i);
//}

////(7)求mn两个数的最大公约数
//#include<stdio.h>
//#include<stdlib.h>
//int main()
//{
//    int m, n, r;
//    scanf("%d%d", &m, &n);
//    r = m % n;//先算出一个余数
//    while (r != 0) //当r不是0时循环
//    {
//        m = n;
//        n = r;
//        r = m % n;
//    }
//    printf("%d\n", n);
//    return 0;
//}

////(8)求二次方程的两个根
//#include <stdio.h>
//#include <math.h>
//int main()
//{
//    double a, b, c;                                /*定义系数变量*/
//    double x1, x2, p;                              /*定义根变量和表达式的变量值*/
//    printf("请输入a,b,c:");                      /*提示用户输入三个系数*/
//    scanf_s("%lf%lf%lf", &a, &b, &c);                 /*接收用户输入的系数*/
//    printf("\n");                               /*输出回行*/
//    p = b * b - 4 * a * c;                            /*给表达式赋值*/
//    x1 = (-b + sqrt(p)) / (2 * a);                           /*根1的值*/
//    x2 = (-b - sqrt(p)) / (2 * a);                           /*跟2的值*/
//    printf("x1=%f,x2=%f\n", x1, x2);                 /*输出两个根的值*/ 
//    return 0;
//}


//while 循环
//while 表达式是顶部驱动（top-driven）的循环：先计算循环条件（也就是控制表达式）。
  //如果为 true，就执行循环体，然后再次计算控制表达式。
  //如果控制表达式为 false，程序跳过循环体，而去执行循环体后面的语句。

/* 从键盘输入数字，然后输出它们的平均值
* -------------------------------------- */
//#include <stdio.h>
//int main()
//{
//    double x = 0.0, sum = 0.0;
//    int count = 0;
//    printf("\t--- Calculate Averages ---\n");
//    printf("\nEnter some numbers:\n"
//        "(Type a letter to end your input)\n");
//    while (scanf_s("%lf", &x) == 1)
//    {
//        sum += x;
//        ++count;
//    }
//    if (count == 0)
//        printf("No input data!\n");
//    else
//        printf("The average of your numbers is %.2f\n", sum / count);
//    return 0;
//}





//for 循环
//和 while 一样，for 循环也是一个顶部驱动的循环
/*(1) 表达式 1：初始化
只计算一次。在计算控制表达式之前，先计算一次表达式 1，
 以进行必要的初始化，后面不再计算它。

(2) 表达式 2：控制表达式
每轮循环前都要计算控制表达式，以判断是否需要继续本轮循环。
当控制表达式的结果为 false，结束循环。

(3) 表达式 3：调节器
调节器（例如计数器自增）在每轮循环结束后且表达式 2 计算前执行。
即，在运行了调节器后，执行表达式 2，以进行判断。*/
//int main()
//{
//#define ARR_LENGTH 1000
///* ... */
//long arr[ARR_LENGTH];
//int i;
//for (i = 0; i < ARR_LENGTH; ++i)
//    arr[i] = 2 * i;
//}

//int main( )
//{
//    i = 0;                             // 初始化计数器
//    while (i < ARR_LENGTH)     // 循环条件
//    {
//        arr[i] = 2 * i;
//        ++i;                        // 递增计数器
//    }
//}
//




/*do...while 循环
do...while 循环是一种底部驱动的循环：
do 语句 while (表达式);
在控制表达式被第一次计算之前，循环体语句会首先被执行一次。
与 while 和 for 循环不同，do...while 循环会确保循环体语句至少执行一次
如果控制表达式的值为 true，那么另一次循环就会继续；如果是 false，则循环结束

// 读入和执行所选的菜单命令
// --------------------------------------------
int getCommand( void );
void performCommand( int cmd );
#define END 0
/* ... */
//int main()
//{
//	do
//	{
//		int command = getCommand();   // 询问菜单系统
//		performCommand(command);    // 执行所选的菜单命令
//	} while (command != END);
//}


// 将字符串2复制到字符串1
// ----------------------------
//char* strcpy(char* restrict s1, const char* restrict s2)
//{
//    int i = 0;
//    do
//        s1[i] = s2[i];               // 循环体：复制每一个字符
//    while (s2[i++] != '\0');      // 如果刚刚复制的是'\0'，则结束循环
//    return s1;
//}




//     没写完
//从自然数中取3个数进行组合之循环算法
//用循环算法找出 5 个自然数中取 3 个数的组合













//p18 【例题2.2】 50名学生输出成绩在80分以上的姓名和学号
//#include <stdio.h>
//int main()
//{
//	int i;
//	int No[50], Score[50];
//	for (i = 0; i < 50; i++)
//	{
//		printf("请输入第%d个学生的学号和成绩\n", i + 1);
//		scanf_s("%d %d", &No[i], &Score[i]);
//	}
//	printf("成绩高于80分的学生的学号是:\n");
//	for (i = 0; i < 50; i++)
//	{
//		if (Score[i] > 80)
//		{
//			printf("%d ", No[i]);
//		}
//	}
//	return 0;
//}






//p22 例2.6
//int main()
//{
//	int a = 1 * 2 * 3 * 4 * 5;
//	printf("%d\n", a);
//	return 0;
//}





//全局变量 局部变量的生命周期
//全局变量的生命周期：整个函数的生命周期
//int main()
//{
//	{
//		int a = 10;
//		printf("a=%d\n", a);//ok
//	}
//	printf("a=%d\n", a);//error
//	return 0;
//}



//#include<stdio.h>
//int main( )
//{
//	int num1 = 0;
//	int num2 = 0;
//	int sum = 0;
//	scanf("%d%d", &num1, &num2);//取地址符 把一会儿输入的两个值
//									  //放在两个地址处
//	sum = num1 + num2;
//	printf("sum=%d\n",sum);
//	return 0;
//}


/*scanf 是C语言标准代码
  scanf_s不是标准C语言提供的 是vs编译器提供的
                跨平台性/可移植性
#define _CRT_SECURE_NO_WARNINGS 1
  加在源文件第一行*/


  //【1】常量
  //【2】int main()
  //{
  //    //const--常属性
  //    const int n = 10;//n是变量，但是又有常属性，所以我们说n是场常变量
  //   // int arr[n] = { 0 };
  //    n = 20;
  //
  //
  //    //const修饰的常变量
  //    //const int num = 4;
  //    //printf("%d\n", num);//num本质属性还是一个变量
  //    //num = 8;
  //    //printf("%d\n", num);
  //    //3;//字面常量
  //    //400;
  //    //3.14;
  //
  //    return 0;
  //}



  ////【3】#define 定义的标识符常量
  //#define MAX 10
  //
  //int main()
  //{
  //    int arr[MAX] = { 0 };
  //    printf("%d\n", MAX);
  //    return 0;
  //}

  /*【4】枚举常量
     枚举----一一列举

     性别：男，女，保密
     三原色：红、黄、蓝
     星期：1，2，，，，6，7   */
     //枚举关键字----enum

    //enum Sex
    //{
    //    MALE,
    //    FEMALE,
    //    SECRET
    //
    //};
    ////MELE,FEMALE,SECRET------枚举常量
    //int main()
    //{
    //   // enum Sex s = FEMALE;
    //    printf("%d\n", MALE);//0
    //    printf("%d\n", FEMALE);//1
    //    printf("%d\n", SECRET);//2
    //    return 0;
    //}


    //enum Color
    //{
    //    RED,
    //    YELLOW,
    //    BLUE
    //};
    // int main()
    //{
    //    enum Color color = BLUE;
    //    return 0;
    //}



    //字符串类型
    //int main()
    //{
    //    "abcdef"
    //        "hello bit"
    //        ""//空字符串
    //}
    //int main()
    //{    
    //    //数据在计算机上储存的时候，储存的是2进制
    //    //#av$
    //    //a-97
    //    //A-65
    //    //......
    //
    //    char arrl[] = "abc";//数组
    //    //"abc"----'a','b',c','\0'-----字符串的结束标志
    //    char arr2[]={'a','b','c',0};//-----\n的值是0
    //    //'a' 'b' 'c'
    //    printf("%s\n", arrl);
    //    printf("%s\n", arr2);
    //    return 0;
    //}


    //#include<string.h>
    //int main( )
    //{
    //    char arr1[] = "abc";
    //    char arr2[] = {'a', 'b', 'c','\0'};
    //    printf("%d\n", strlen(arr1));//strlen--string length----统计字符串的长度
    //    printf("%d\n", strlen(arr2));
    //    return 0;
    //}


    //int main()
    //{
    //    int A = 0;
    //    printf("上交大\n");
    //    printf("你要好好学习吗？？？？(0/1)>:");
    //    scanf("%d", A);//0/1
    //    if (A == 1)
    //        printf("好offer\n");
    //    else
    //        printf("回家卖红薯\n");
    //    return 0;
    //}



    //int A;
    //int main()
    //{
    //    A = (5 % 2);
    //    printf("%d\n", A);
    //    return 0;
    //}


    //int c;
    //int main()
    //{
    //    //(2进制）位操作
    //    //&按位与
    //    //|按位或
    //    //^按位异或
    //    //int  a = 3; //001
    //    //int b = 5;  //101
    //    //c = a & b;  //001
    //    //printf("%d\n", c);
    //    //    return 0;
    //
    //    //int a = 3;   //011
    //    //int b = 5;   //101
    //    //c = (a | b); //111
    //    //printf("%d\n",c);
    //    //return 0;

    //    int a = 3;//011
    //    int b = 5;//101
    //              //110
    //    c = a ^ b;//^不是次方 是异或
    //    //计算规律是：对应的二进制位相同则为0；
    //    //对应的二进制位相异，则为1;
    //    printf("%d\n", c);
    //    return 0;  
    //}


    //
    //
    //#include<stdio.h>
    //int sum(int m, int n);
    //int main()
    //{
    //    int m,n;
    //    scanf_s ("%d%d", &m, &n);
    //    printf("sum=%d\n", sum(m, n));
    //    return 0;
    //}




//int main()
//{
//    int a = 0;//a---整形 占用4个字节--32个bit位
//    int b = ~a;//b是有符号的整形
//    //~-----按（2进制）位取反
//    //00000000000000000000000000000000000
//    //11111111111111111111111111111111111
//    //原码、反码、补码
//    //复数在内存中存储是时候是2进制的补码
//    //打印的是这个数的原码
//
//    printf("%d\n", b);
//    //11111111111111111111111111111111111  补码
//    //11111111111111111111111111111111110  反码
//    //10000000000000000000000000000000001  原码
//    return 0;
//}



//int main()
//{
//    int a = 10;
//    //int b = a++;
//    //后置++，使用方式---先使用a的值，再++
//    //int b = ++a;//前置++，使用方法---先++再使用
//    //int b = a--;//后置--，
//    int b = --a;//前置--，---使用方法先--，再使用
//    printf("a=%d b=%d\n", a, b);//
//    return 0;
//}


//int main()
//{
//    int a = (int)3.14;//强制类型转换
//    return 0;
//}

//关系操作符  >=
//!=  用于测试“不相等”
//! ==  用于测试“相等”




//
//int main()
//{
//    //0表示--假   非0----真
//    //&&---逻辑与
//    int a = 3;
//    int b = 5;
//    int c = a && b;
//    printf("c=%d\n", c);//逻辑与的输出结果为真假 真用1表示
//        return 0;
//}



//int Add(int x, int y)
//{
//    int z = 0;
//    z = x + y;
//    return z;
//}
//int main()
//{
//    //  int arr[10] = { 0 };
//    //  arr[4];//---下表引用操作符
//        int a = 10;
//        int b = 20;
//        int sum = Add(a, b);//函数调用操作符
//    return 0;
//}



//11111111111111111111111111111111  //1*2^32-1
//100000000000000000000000000000000
//1*2^32


////static修饰局部变量
////变量生命周期变长
////static修饰全局变量
////改变了变量的作用域----让静态的全局变量只能在
// //                     自己的源文件中使用
// static修饰函数----改变了函数的作用域
//               ----改变了函数的连接属性
//               ----外部连接属性---->内部连接属性
// 
//void test()
//{
//   static int a = 1;//a是一个静态的局部变量
//    a++;
//    printf("a=%d\n",a);
//}
//int main()
//{
//    int i = 0;
//        while (i < 5);
//        {
//            test();
//                i++;
//        }
//        return 0;
//}




////定义一个函数  //在另一个源文件中
//int Add(int x, int y)
//{
//    int z = 0;
//    z = x + y;
//    return z;
//}
////声明外部函数
//extern int Add(int, int);
//int main()
//{
//    int a = 10;
//    int b = 20;
//    int sum = Add(a, b);
//    return 0;
//}



////#define定义常量和宏
////#drfine定义的标识符常量
//#define MAX 100
////#define可以定义宏----带参数
//
////函数的实现
//int Max(int x, int y)
//{
//    if (x > y)
//        return x;
//    else
//        return y;
//}
//    //宏的定义方式
//#define MAX(X,Y) (X>Y?X:Y)
//
//int main()
//{
//    //int a = MAX;
//    int a = 10;
//    int b = 20;
//    //函数
//    int max = Max(a, b);
//    printf("max=%d\n", max);
//    //宏的方式
//    max = MAX(a, b);
//    //max=(a>b?a:b)
//    printf("max=%d\n", max);
//    return 0;
//}


//指针
// 
//int main()
//{
//    int a = 10;//4个字节
//   int* p = &a;//取地址
//   // printf("%p\n",&a);
//   // printf("%p\n", p);
//   *p=20;//解引用操作符
//   printf("a=%d\n", a);
//    //有一种变量是用来存放地址的-----指针变量
//    //printf("%p\n", &a);
//    return 0;
//}


//int main()
//{
//    char ch = 'w';
//    char* pc= &ch;
//    printf("%d\n", sizeof(pc));
//    *pc = 'a';
//    printf("%c\n", ch);
//    return 0;
//}



////结构体
////复杂对象--结构体--我们自己创造出来的一种类型
//
//
//#include<string.h>//引用库函数
////创建一个结构体类型
//struct Book
//{
//    char name[20];//C语言程序设计
//    short price;//55元
//};
//
//int main()
//{
//    //利用结构体类型--创建一个该类型的变量
//    struct Book b1 = { "C语言程序设计语言", 55 };
//    strcpy(b1.name,"C++");//strcpy-string copy---字符串拷贝
//                    //name不是一个变量，它是一个数组的数组名
//                    //---本质上是一个地址
//    printf("%s\n", b1.name);
//    //b1.price=15;//price是一个变量
//
//    //struct Book* pb=&b1;
//    //利用pb打印出我的书名和价格呢？？？？
//    //.操作符   ---结构体变量.成员
//    //->操作符  ---结构体指针->成员 
//    
//    //printf("%s\n", pb->name);
//    //printf("%d\n", pb->price);
//
//    //printf("%s\n", (*pb).name);
//    //printf("%d\n", (*pb).price);
//
//    //printf("书名:%s\n", b1.name);//%s--打印字符串
//    //printf("价格:%d元\n", b1.price);
//    //b1.price = 15;
//    //printf("修改后的价格:%d元\n", 15);
//    //b1.price = 10;
//    //printf("再次修改后的价格:%f元\n",9.99);
//    return 0;
//}




////[P58 例3.4]
//#include<math.h>
//int main()
//{
//    double a, b, c, s, area;
//    a = 3.67;
//    b = 5.43;
//    c = 6.21;
//    s = (a + b + c) / 2;
//        area = sqrt(s * (s - a) * (s - b) * (s - c));
//    printf("a=%f\tb=%f\t\n", a, b, c);
//    printf("area=%f\n", area);
//
//    return 0;
//}



////[P64 3.5.1]
//#include<math.h> //程序中要求调用平方根函数sqrt
//int main()
//{
//    double a, b, c, disc, x1, x2, p, q;//disc用来存放判别式(b*b-a*a*c)的值
//    scanf_s("lf % lf % lf",&a,&b,&c);//输入双精度型变量的值要用声明格式"%If"
//    disc = b * b - 4 * a * c;
//    p = -b / (2.0 * a);
//    q = sqrt(disc) / (2.0 * a);
//    x1 = p = q;  x2 = p - q;                   //求出方程的两个根
//    printf("x1=%7.2f\nx2=%7.2f\n", x1, x2);    //输出方程的两个根   7.2其中数据占7列 小数占2列
//    return 0;
//}



////计算阶乘
//int main()
//{
//    int i = 0;
//    int n = 0;
//    int ret = 1;
//    scanf_s("%d", &n); //100
//    for (i = 1;i <= 10; i++)
//    {
//        ret = ret * i;
//    }
//    printf("ret=%d\n", ret);
//    return 0;
//}




//int main()
//{
//    int i = 0; 
//    int n = 0; 
//    int ret = 1;
//    int sum = 0;//1+2+6=9
//    for (n = 1; n <= 3; n++)
//    {
//        int ret = 1;
//        for (i = 1; i <= n; i++)
//        {
//            ret = ret * i;
//        }
//        //n的阶乘
//        sum = sum + ret;
//    }
//    printf("ret=%d\n", sum);
//    return 0;
//}



//int main()
//{
//    int i = 0;
//    int n = 0;
//    int ret = 1;
//    int sum = 0;//1+2+6=9
//    for (n = 1; n <= 3; n++)
//    {
//            ret = ret * n;
//            //n的阶乘 //n的阶乘
//            sum = sum + ret;
//        }
//    printf("ret=%d\n", sum);
//    return 0;
//    }




////最大公约数  辗转相除法
//int main()
//{
//    int r = 0;
//    int m = 24;
//    int n = 18;
//    while (r=m % n)
//    {
//       // r = m % n;
//        m = n;
//        n = r;
//     }
//    printf("%d\n", n);
//    return 0;
//}
