////数组的创建
//int main()
//{
//    //创建
//    int arr[10] = {1,2,3};//不完全初始化，剩下的元素 默认初始化为0
//    char arr2[5] = { 'a','b',98 };
//    char arr3[5] = "ab";//a b （0---\0） 0 0
//    char arr4[] = "abcdef";
//    printf("%d\n", sizeof(arr4));//
//    //sizeof 计算arr4所占空间大小 
//    //7个元素-char 7*1=7
//    printf("%d\n", strlen(arr4));
//    //strlen 求字符串的长度-‘\0’之前的字符个数
//    //[a b c d e f \0]
//    //6
//
//
//    //char ch[n];//err----方括号中只能是常量表达式 不能是变量
//    return 0;
//
//}



//1.strlen 和 sizeof 没有什么联系
//2.srelen 是求字符串的长度--只能针对字符串求长度--库函数---使用需要引头文件
//3.sizeof 计算变量、数组、类型的大小--单位是字节--操作符

//int main()
//{
//    char arr1[] = "abc";
//    char arr2[] = { 'a','b','c' };
//    printf("%d\n", sizeof(arr1));//a b c \0  ----4
//    printf("%d\n", sizeof(arr2));//a b c --------3
//    printf("%d\n", strlen(arr1));//a b c---------3
//    printf("%d\n", strlen(arr2));//随机数
//    return 0;
//}


//int main()
//{
//    //char arr[] = "abcdef";// [a] [b] [c] [d] [e] [f]  [\0]
//    ////printf("%c\n",arr[3];
//    //int i = 0;
//    //int len = strlen(arr);
//    ////for (i = 0; i < 6; i++)
//    //for (i = 0; i <len; i++)
//    //{
//    //    printf("%c ", arr[i]);
//    //}
//    int arr[] = { 1,2,3,4,5,6,7,8,9 };
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    int i = 0;
//    for (i = 0; i < sz; i++)
//    {
//        printf("%d ", arr[i]);
//    }
//    return 0;
//}


//int main()
//{
//    int arr[] = { 1,2,3,4,5,6,7,8,9 };//数组在内存中是连续存放的
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    int i = 0;
//    for (i = 0; i < sz; i++)
//    {
//        printf("&arr[%d]=%p\n", i, &arr[i]);
//    }
//    return 0;
//} 


//////二维数组的创建和初始化
//// //二维数组的使用
//int main()
//{
//    int arr[3][4] = { {1,2,3},{4,5} };
//    //1 2 3 0
//    //4 5 0 0
//    //0 0 0 0
//    int i = 0;
//    for (i = 0; i < 3; i++)
//    {
//        int j = 0;
//        for (j = 0; j < 4; j++)
//        {
//            printf("%d ", arr[i][j]);
//        }
//        printf("\n");
//    }
//    ////char ch[5][6];
//    ////int arr[]={1，2，3，4}
//    //int arr[2][4] = { {1,2,3,4 }, { 5,6,7,8 } };
//        return 0;
//}



//int main()
//{
//    int arr[3][4] = { {1,2,3},{4,5} };
//    int i = 0;
//    for (i = 0; i < 3; i++)
//    {
//        int j = 0;
//        for (j = 0; j < 4; j++)
//        {
//            printf(" & arr[% d][% d] = % p\n", i, j, &arr[i][j]);
//        }
//        
//    }
//  
//        return 0;
//}



////数组作为函数参数进行传参
//
//void bubble_sort(int arr[],int sz)
//{
//    //冒泡排序---十个元素 九趟冒泡排序
//    //首先确定冒泡排序的趟数
//    int i = 0;
//    for (i = 0; i < sz - 1; i++)
//    {
//        int flag = 1;//假设这一趟要排序的数据已经有序
//        //每一趟冒泡排序
//        int j = 0;
//        for (j = 0; j<sz-1-i; j++)
//        {
//            if (arr[j] > arr[j + 1])
//            {
//                int tmp;
//                tmp = arr[j];
//                arr[j] = arr[j + 1];
//                arr[j + 1] = tmp;
//                flag = 0;//本趟排序的数据其实不完全有序
//            }
//        }
//        if (flag == 1)
//        {
//            break;
//        }
//    }
//}
//
//int main()
//{
//    int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
//    int i = 0;
//    int sz = sizeof(arr) / sizeof(arr[0]);//函数外边把元素个数算出来
//    //对arr排成升序
//    //arr是数组 我们对数组arr进行传参--实际传过去的是
//                                    //arr首元素的地址&arr[0]
//    bubble_sort(arr,sz);//冒泡排序函数
//    for (i = 0; i < sz; i++)
//    {
//        printf("%d ", arr[i]);
//    }
//    return 0;
//}



//int main()
//{
//    int arr[] = { 1,2,3,4,5,6,7 };
//    printf("%p\n", arr);
//    printf("%p\n", arr+1);
//
//    printf("%p\n", &arr[0]);
//    printf("%p\n", &arr[0]+1);
//
//    printf("%p\n", &arr);//------得到的是数组的地址
//    printf("%p\n", &arr+1);
//
//
//    //int sz = sizeof(arr) / sizeof(arr[0]);
//    //1.sizeof(数组名)---数组名表示整个数组的大小
//    //   sizeof(数组名)计算的是整个数组的大小，单位是字节
//    // 2. &数组名的时候，数组名代表整个数组，&数组名取出的是整个数组的地址
//    //printf("%p\n", arr);//数组名是首元素的地址——（有俩个例外）
//    //                    //
//    //printf("%p\n", &arr[0]);
//    //printf("%d\n", *arr);
//    return 0;
//}
